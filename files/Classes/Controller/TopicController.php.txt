<?php
namespace ONEANDONE\Board\Controller;


/***************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2016
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/
use ONEANDONE\Board\Utility\Breadcrumb;
use TYPO3\CMS\Core\Messaging\AbstractMessage;

/**
 * TopicController
 */
class TopicController extends \TYPO3\CMS\Extbase\Mvc\Controller\ActionController
{

    /**
     * persistence manager
     *
     * @var \TYPO3\CMS\Extbase\Persistence\PersistenceManagerInterface
     * @inject
     */
    protected $persistenceManager;

    /**
     * topicRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\TopicRepository
     * @inject
     */
    protected $topicRepository = NULL;

    /**
     * postRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\PostRepository
     * @inject
     */
    protected $postRepository = NULL;

    /**
     * boardRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\BoardRepository
     * @inject
     */
    protected $boardRepository = NULL;

    /**
     * user
     *
     * @var \ONEANDONE\Board\Utility\User
     * @inject
     */
    protected $user = NULL;

    /**
     * breadcrumb
     *
     * @var \ONEANDONE\Board\Utility\Breadcrumb
     * @inject
     */
    protected $breadcrumb = NULL;

    public function initializeView()
    {

        if ($this->user->loggedIn()) {
            $this->view->assign('user', $this->user);
        }

        $this->view->assign('breadcrumb', $this->breadcrumb);

    }

    /**
     * action list
     *
     * @return void
     */
    public function listAction()
    {
        $topics = $this->topicRepository->findAll();
        $this->view->assign('topics', $topics);
    }

    /**
     * action show
     *
     * @return void
     */
    public function showAction()
    {

        $topicid = $this->request->getArgument('topic');

        /**
         * @var $topic \ONEANDONE\Board\Domain\Model\Topic
         */
        $topic = $this->topicRepository->findByUid($topicid);

        $cookie = 'Topic_Unlocked_' . $topic->getUid();

        if ($topic->getLocked() && $_COOKIE[$cookie] != 'true') {
            $this->redirect('password', 'Topic', 'Board', [
                'topic' => $topic
            ]);
        }

        $this->breadcrumb->addElement($topic->getBoard()->getTitle(), Breadcrumb::INACTIVE, 'show', 'Board', [
            'board' => $topic->getBoard()
        ]);

        $this->breadcrumb->addElement($topic->getTitle(), Breadcrumb::ACTIVE);

        $this->view->assign('topic', $topic);
    }

    /**
     * action new
     *
     * @return void
     */
    public function newAction()
    {

        if (!$this->user->loggedIn()) {
            $this->user->redirect($this);
            $this->redirect('login', 'User');
        }

        if ($this->request->hasArgument('boardid')) {

            $boardid = $this->request->getArgument('boardid');

            if (!$boardid) {
                $this->addFlashMessage(
                    'Topics could be only created in a board.',
                    NULL,
                    AbstractMessage::WARNING
                );
                $this->redirect('list', 'Board');
            }

            $board = $this->boardRepository->findByUid($boardid);

            $this->breadcrumb->addElement($board->getTitle(), 'list', 'Board');

            $this->view->assign('boardid', $board->getUid());

        }

        $this->breadcrumb->addElement('Create a new topic', Breadcrumb::ACTIVE);

    }

    /**
     * action create
     *
     * @param \ONEANDONE\Board\Domain\Model\Topic $newTopic
     * @return void
     */
    public function createAction(\ONEANDONE\Board\Domain\Model\Topic $newTopic)
    {

        if ($newTopic->getLocked()) {
            $newTopic->setPassword(md5($newTopic->getPassword()));
        }

        $newTopic->setCrdate(time());

        $this->topicRepository->add($newTopic);

        $this->persistenceManager->persistAll();

        $post = new \ONEANDONE\Board\Domain\Model\Post();
        $post->setCrdate(time());
        $post->setAuthor($newTopic->getAuthor());
        $post->setTopicid($newTopic->getUid());
        $post->setText($newTopic->getText());
        $this->postRepository->add($post);

        $this->redirect('show', 'Topic', 'Board', [
            'topic' => $newTopic
        ]);

    }

    /**
     * action password
     *
     * @param \ONEANDONE\Board\Domain\Model\Topic $topic
     * @ignorevalidation $topic
     * @return void
     */
    public function passwordAction()
    {

        $topic = NULL;

        if ($this->request->hasArgument('topic')) {

            $topic = $this->topicRepository->findByUid($this->request->getArgument('topic'));

            $this->breadcrumb->addElement($topic->getTitle());
            $this->breadcrumb->addElement('Unlock', Breadcrumb::ACTIVE);

            $cookie = 'Topic_Unlocked_' . $topic->getUid();

            if ($this->request->hasArgument('data')) {

                $data = json_decode(json_encode($this->request->getArgument('data')), 0);

                if (md5($data->password) == $topic->getPassword()) {
                    setcookie($cookie, 'true', time() + 3600);
                }

                if (isset($_COOKIE[$cookie]) && $_COOKIE[$cookie] == 'true') {
                    return $this->redirect('show', 'Topic', 'Board', [
                        'topic' => $topic
                    ]);
                }

                $this->addFlashMessage(
                    'The password you have entered is not correct.',
                    NULL,
                    AbstractMessage::ERROR
                );

            }

        }

        $this->view->assign('topic', $topic);

    }

    /**
     * action edit
     *
     * @param \ONEANDONE\Board\Domain\Model\Topic $topic
     * @ignorevalidation $topic
     * @return void
     */
    public function editAction(\ONEANDONE\Board\Domain\Model\Topic $topic)
    {
        $this->view->assign('topic', $topic);
    }

    /**
     * action update
     *
     * @param \ONEANDONE\Board\Domain\Model\Topic $topic
     * @return void
     */
    public function updateAction(\ONEANDONE\Board\Domain\Model\Topic $topic)
    {
        $this->addFlashMessage('The object was updated. Please be aware that this action is publicly accessible unless you implement an access check. See http://wiki.typo3.org/T3Doc/Extension_Builder/Using_the_Extension_Builder#1._Model_the_domain', '', \TYPO3\CMS\Core\Messaging\AbstractMessage::ERROR);
        $this->topicRepository->update($topic);
        $this->redirect('list');
    }

    /**
     * action delete
     *
     * @param \ONEANDONE\Board\Domain\Model\Topic $topic
     * @return void
     */
    public function deleteAction(\ONEANDONE\Board\Domain\Model\Topic $topic)
    {
        $this->addFlashMessage('The object was deleted. Please be aware that this action is publicly accessible unless you implement an access check. See http://wiki.typo3.org/T3Doc/Extension_Builder/Using_the_Extension_Builder#1._Model_the_domain', '', \TYPO3\CMS\Core\Messaging\AbstractMessage::ERROR);
        $this->topicRepository->remove($topic);
        $this->redirect('list');
    }

}
