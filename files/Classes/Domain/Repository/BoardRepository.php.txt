<?php
namespace ONEANDONE\Board\Domain\Repository;

    /***************************************************************
     *
     *  Copyright notice
     *
     *  (c) 2016
     *
     *  All rights reserved
     *
     *  This script is part of the TYPO3 project. The TYPO3 project is
     *  free software; you can redistribute it and/or modify
     *  it under the terms of the GNU General Public License as published by
     *  the Free Software Foundation; either version 3 of the License, or
     *  (at your option) any later version.
     *
     *  The GNU General Public License can be found at
     *  http://www.gnu.org/copyleft/gpl.html.
     *
     *  This script is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     *  GNU General Public License for more details.
     *
     *  This copyright notice MUST APPEAR in all copies of the script!
     ***************************************************************/

/**
 * The repository for Boards
 */
class BoardRepository extends \TYPO3\CMS\Extbase\Persistence\Repository
{

    /**
     * topicRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\TopicRepository
     * @inject
     */
    protected $topicRepository = NULL;

    /**
     * @return array
     */
    public function findAll()
    {

        $query = $this->createQuery();
        return $this->prepare($query->execute());

    }

    /**
     * @param int $uid
     * @param bool $extended
     * @return mixed|object|\ONEANDONE\Board\Domain\Model\Board
     */
    public function findByUid($uid, $extended = true)
    {

        $query = $this->createQuery();
        $query->matching($query->equals('uid', $uid));

        $result = $query->execute();

        if (!$result->count()) {
            return $this->dummyObject();
        }

        if (!$extended) {
            return $result->getFirst();
        }

        return $this->prepare([$result->getFirst()])[0];

    }

    /**
     * @param $parentid
     * @return array
     */
    public function findByParentId($parentid)
    {

        $query = $this->createQuery();
        $query->matching($query->equals('parentid', $parentid));

        return $this->prepare($query->execute());

    }

    /**
     * @param $result
     * @return array
     */
    protected function prepare($result)
    {

        $boards = [];

        /**
         * @var $board \ONEANDONE\Board\Domain\Model\Board
         */
        foreach ($result as $board) {
            $board->setTopics($this->topicRepository->findByBoardId($board->getUid()));
            $board->setSubboards($this->findByParentId($board->getUid()));
            $boards[] = $board;
        }

        return $boards;

    }

    protected function dummyObject()
    {
        return new \ONEANDONE\Board\Domain\Model\Board();
    }


}
