<?php
namespace ONEANDONE\OneandoneBoard\Domain\Repository;

    /***************************************************************
     *
     *  Copyright notice
     *
     *  (c) 2016
     *
     *  All rights reserved
     *
     *  This script is part of the TYPO3 project. The TYPO3 project is
     *  free software; you can redistribute it and/or modify
     *  it under the terms of the GNU General Public License as published by
     *  the Free Software Foundation; either version 3 of the License, or
     *  (at your option) any later version.
     *
     *  The GNU General Public License can be found at
     *  http://www.gnu.org/copyleft/gpl.html.
     *
     *  This script is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     *  GNU General Public License for more details.
     *
     *  This copyright notice MUST APPEAR in all copies of the script!
     ***************************************************************/

/**
 * The repository for Posts
 */
class PostRepository extends \TYPO3\CMS\Extbase\Persistence\Repository
{

    /**
     * topicRepository
     *
     * @var \ONEANDONE\OneandoneBoard\Domain\Repository\TopicRepository
     * @inject
     */
    protected $topicRepository = NULL;

    /**
     * likeRepository
     *
     * @var \ONEANDONE\OneandoneBoard\Domain\Repository\LikeRepository
     * @inject
     */
    protected $likeRepository = NULL;

    /**
     * userRepository
     *
     * @var \ONEANDONE\Community\Domain\Repository\UserRepository
     * @inject
     */
    protected $userRepository = NULL;

    /**
     * helper
     *
     * @var \ONEANDONE\Community\Utility\Helper
     * @inject
     */
    protected $helper = NULL;

    public function findByPid($pid)
    {

        $query = $this->createQuery();
        $query->getQuerySettings()->setRespectStoragePage(FALSE);
        $query->matching($query->equals('parentid', $pid));

        $posts = [];
        $tmpPosts = $query->execute();

        foreach ($tmpPosts as $post) {
            if (is_int($post->getAuthor())) {
                $author = $this->userRepository->findByUid($post->getAuthor());
                if (is_null($author)) {
                    $author = new \ONEANDONE\Community\Domain\Model\User();
                    $author->setUsername('Anonymous');
                }
                $post->setAuthor($author);
            }
            if ($this->helper->loggedIn()) {
                if ($post->getAuthor()->getUid() == $this->helper->getUser()->getUid()) {
                    $post->setEditable(true);
                }
                $post->setLikeable($this->likeRepository->hasLiked($this->helper->getUser()->getUid(), $post->getUid()));
            }
            $post->setLikes($this->likeRepository->getByPostId($post->getUid()));
            $post->setPosts($this->findByPid($post->getUid()));
            $post->setTopic($this->topicRepository->findByUid($post->getTopicId()));
            $posts[] = $post;
        }

        return $tmpPosts;

    }

    public function findByAuthor($authorid)
    {

        $query = $this->createQuery();
        $query->getQuerySettings()->setRespectStoragePage(FALSE);
        $query->matching($query->equals('author', $authorid));

        $posts = [];
        $tmpPosts = $query->execute();

        foreach ($tmpPosts as $post) {
            $post->setLikes($this->likeRepository->getByPostId($post->getUid()));
            $post->setPosts($this->findByPid($post->getUid()));
            $post->setTopic($this->topicRepository->findByUid($post->getTopicId()));
            $posts[] = $post;
        }

        return $tmpPosts;

    }

    public function findAll()
    {

        $query = $this->createQuery();

        $posts = array();
        $tmpPosts = $query->execute();
        /**
         * @var $post \ONEANDONE\OneandoneBoard\Domain\Model\Post
         */
        foreach ($tmpPosts as $post) {
            $post->setPosts($this->findByPid($post->getUid()));
            $post->setLikes($this->likeRepository->getByPostId($post->getUid()));
            $post->setTopic($this->topicRepository->findByUid($post->getTopicid()));
            $posts[] = $post;
        }
        return $posts;
    }

    /**
     * @param $topicid
     */
    public function getByTopicId($topicid)
    {
        $query = $this->createQuery();
        $query->getQuerySettings()->setRespectStoragePage(FALSE);
        $query->matching(
            $query->logicalAnd(
                $query->equals('topicid', $topicid),
                $query->equals('parentid', 0)
            )
        );
        $posts = array();
        $tmpPosts = $query->execute();
        /**
         * @var $post \ONEANDONE\OneandoneBoard\Domain\Model\Post
         */
        foreach ($tmpPosts as $post) {
            if (is_int($post->getAuthor())) {
                $author = $this->userRepository->findByUid($post->getAuthor());
                if (is_null($author)) {
                    $author = new \ONEANDONE\Community\Domain\Model\User();
                    $author->setUsername('Anonymous');
                }
                $post->setAuthor($author);
            }
            $post->setPosts($this->findByPid($post->getUid()));
            $post->setTopic($this->topicRepository->findByUid($post->getTopicid()));
            $post->setLikes($this->likeRepository->getByPostId($post->getUid()));
            $posts[] = $post;
        }
        return $posts;
    }

}
