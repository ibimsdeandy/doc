<?php
namespace ONEANDONE\Board\Domain\Repository;


    /***************************************************************
     *
     *  Copyright notice
     *
     *  (c) 2016
     *
     *  All rights reserved
     *
     *  This script is part of the TYPO3 project. The TYPO3 project is
     *  free software; you can redistribute it and/or modify
     *  it under the terms of the GNU General Public License as published by
     *  the Free Software Foundation; either version 3 of the License, or
     *  (at your option) any later version.
     *
     *  The GNU General Public License can be found at
     *  http://www.gnu.org/copyleft/gpl.html.
     *
     *  This script is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     *  GNU General Public License for more details.
     *
     *  This copyright notice MUST APPEAR in all copies of the script!
     ***************************************************************/

/**
 * The repository for Topics
 */
class TopicRepository extends \TYPO3\CMS\Extbase\Persistence\Repository
{

    /**
     * postRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\PostRepository
     * @inject
     */
    protected $postRepository = NULL;

    /**
     * boardRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\BoardRepository
     * @inject
     */
    protected $boardRepository = NULL;

    /**
     * userRepository
     *
     * @var \ONEANDONE\Board\Domain\Repository\UserRepository
     * @inject
     */
    protected $userRepository = NULL;

    /**
     * @param $boardid
     * @return array
     */

    public function findByBoardId($boardid)
    {

        $query = $this->createQuery();
        $query->matching($query->equals('boardid', $boardid));

        return $this->prepare($query->execute());

    }

    /**
     * @param int $uid
     * @return \ONEANDONE\Board\Domain\Model\Topic
     */

    public function findByUid($uid)
    {

        $query = $this->createQuery();
        $query->matching($query->equals('uid', $uid));

        $result = $query->execute();

        return $this->prepare([$result->getFirst()])[0];

    }

    /**
     * @param $result
     * @return array
     */

    protected function prepare($result)
    {

        $topics = [];

        /**
         * @var $topic \ONEANDONE\Board\Domain\Model\Topic
         */
        foreach ($result as $topic) {

            $posts = $this->postRepository->findByTopicId($topic->getUid());

            if (count($posts) >= 1) {
                $topic->setLatest($posts[count($posts) - 1]);
            }

            $topic->setBoard($this->boardRepository->findByUid($topic->getBoardid(), false));
            $topic->setAuthor($this->userRepository->findByUid($topic->getAuthor()));
            $topic->setPosts($posts);

            $topics[] = $topic;

        }

        return $topics;

    }

}
