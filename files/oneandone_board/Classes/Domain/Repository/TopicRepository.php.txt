<?php
namespace ONEANDONE\OneandoneBoard\Domain\Repository;

    /***************************************************************
     *
     *  Copyright notice
     *
     *  (c) 2016
     *
     *  All rights reserved
     *
     *  This script is part of the TYPO3 project. The TYPO3 project is
     *  free software; you can redistribute it and/or modify
     *  it under the terms of the GNU General Public License as published by
     *  the Free Software Foundation; either version 3 of the License, or
     *  (at your option) any later version.
     *
     *  The GNU General Public License can be found at
     *  http://www.gnu.org/copyleft/gpl.html.
     *
     *  This script is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     *  GNU General Public License for more details.
     *
     *  This copyright notice MUST APPEAR in all copies of the script!
     ***************************************************************/

/**
 * The repository for Topics
 */
class TopicRepository extends \TYPO3\CMS\Extbase\Persistence\Repository
{

    /**
     * userRepository
     *
     * @var \ONEANDONE\Community\Domain\Repository\UserRepository
     * @inject
     */
    protected $userRepository = NULL;

    /**
     * postRepository
     *
     * @var \ONEANDONE\OneandoneBoard\Domain\Repository\PostRepository
     * @inject
     */
    protected $postRepository = NULL;

    /**
     * categoryRepository
     *
     * @var \ONEANDONE\OneandoneBoard\Domain\Repository\CategoryRepository
     * @inject
     */
    protected $categoryRepository = NULL;

    public function findByAuthor($authorid)
    {

        $query = $this->createQuery();
        $query->getQuerySettings()->setRespectStoragePage(FALSE);
        $query->matching($query->equals('author', $authorid));

        $topics = [];

        $tmpTopics = $query->execute();

        /**
         * @var $topic \ONEANDONE\OneandoneBoard\Domain\Model\Topic
         */
        foreach ($tmpTopics as $topic) {
            if (is_int($topic->getAuthor())) {
                $topic->setAuthor($this->userRepository->findByUid($topic->getAuthor()));
            }
            $topic->setPosts($this->postRepository->getByTopicId($topic->getUid()));
            $topics[] = $topic;
        }

        return $topics;

    }

    public function getRelated()
    {
        $query = $this->createQuery();
        $query->getQuerySettings()->setRespectStoragePage(FALSE);
        $query->matching($query->equals('related', '1'));
        $related = [];
        $tmpRelated = $query->execute();
        foreach ($tmpRelated as $topic) {
            $topic->setPosts($this->postRepository->getByTopicId($topic->getUid()));
            $related[] = $topic;
        }
        return $query->execute();
    }

    /**
     * @param $boardid
     */
    public function getByBoardId($boardid, $category = NULL)
    {

        $query = $this->createQuery();
        $query->getQuerySettings()->setRespectStoragePage(FALSE);

        if (is_null($category)) {
            $query->matching($query->like('boardid', '%' . $boardid . '%'));
        } else {
            $query->matching(
                $query->logicalAnd(
                    $query->like('boardid', '%' . $boardid . '%'),
                    $query->equals('type', $category)
                )
            );
        }

        $topics = [];

        $tmpTopics = $query->execute();

        /**
         * @var $topic \ONEANDONE\OneandoneBoard\Domain\Model\Topic
         */
        foreach ($tmpTopics as $topic) {
            if (is_int($topic->getAuthor())) {
                $topic->setAuthor($this->userRepository->findByUid($topic->getAuthor()));
            }
            $topic->setPosts($this->postRepository->getByTopicId($topic->getUid()));
            $topics[] = $topic;
        }

        return $topics;

    }

}
